// Code generated by entc, DO NOT EDIT.

package useraccount

import (
	"mq/academy/ent/predicate"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldID), id))
		},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.In(s.C(FieldID), v...))
		},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.NotIn(s.C(FieldID), v...))
		},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldID), id))
		},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldID), id))
		},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldID), id))
		},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldID), id))
		},
	)
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldName), v))
		},
	)
}

// Passwd applies equality check predicate on the "passwd" field. It's identical to PasswdEQ.
func Passwd(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldPasswd), v))
		},
	)
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldEmail), v))
		},
	)
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldCreatedAt), v))
		},
	)
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldName), v))
		},
	)
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldName), v))
		},
	)
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldName), v...))
		},
	)
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldName), v...))
		},
	)
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldName), v))
		},
	)
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldName), v))
		},
	)
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldName), v))
		},
	)
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldName), v))
		},
	)
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldName), v))
		},
	)
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldName), v))
		},
	)
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldName), v))
		},
	)
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldName), v))
		},
	)
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldName), v))
		},
	)
}

// PasswdEQ applies the EQ predicate on the "passwd" field.
func PasswdEQ(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldPasswd), v))
		},
	)
}

// PasswdNEQ applies the NEQ predicate on the "passwd" field.
func PasswdNEQ(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldPasswd), v))
		},
	)
}

// PasswdIn applies the In predicate on the "passwd" field.
func PasswdIn(vs ...string) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldPasswd), v...))
		},
	)
}

// PasswdNotIn applies the NotIn predicate on the "passwd" field.
func PasswdNotIn(vs ...string) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldPasswd), v...))
		},
	)
}

// PasswdGT applies the GT predicate on the "passwd" field.
func PasswdGT(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldPasswd), v))
		},
	)
}

// PasswdGTE applies the GTE predicate on the "passwd" field.
func PasswdGTE(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldPasswd), v))
		},
	)
}

// PasswdLT applies the LT predicate on the "passwd" field.
func PasswdLT(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldPasswd), v))
		},
	)
}

// PasswdLTE applies the LTE predicate on the "passwd" field.
func PasswdLTE(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldPasswd), v))
		},
	)
}

// PasswdContains applies the Contains predicate on the "passwd" field.
func PasswdContains(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldPasswd), v))
		},
	)
}

// PasswdHasPrefix applies the HasPrefix predicate on the "passwd" field.
func PasswdHasPrefix(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldPasswd), v))
		},
	)
}

// PasswdHasSuffix applies the HasSuffix predicate on the "passwd" field.
func PasswdHasSuffix(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldPasswd), v))
		},
	)
}

// PasswdEqualFold applies the EqualFold predicate on the "passwd" field.
func PasswdEqualFold(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldPasswd), v))
		},
	)
}

// PasswdContainsFold applies the ContainsFold predicate on the "passwd" field.
func PasswdContainsFold(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldPasswd), v))
		},
	)
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldEmail), v))
		},
	)
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldEmail), v))
		},
	)
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldEmail), v...))
		},
	)
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldEmail), v...))
		},
	)
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldEmail), v))
		},
	)
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldEmail), v))
		},
	)
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldEmail), v))
		},
	)
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldEmail), v))
		},
	)
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldEmail), v))
		},
	)
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldEmail), v))
		},
	)
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldEmail), v))
		},
	)
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldEmail), v))
		},
	)
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldEmail), v))
		},
	)
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldCreatedAt), v))
		},
	)
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
		},
	)
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldCreatedAt), v...))
		},
	)
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
		},
	)
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldCreatedAt), v))
		},
	)
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldCreatedAt), v))
		},
	)
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldCreatedAt), v))
		},
	)
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldCreatedAt), v))
		},
	)
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			t1 := s.Table()
			s.Where(sql.NotNull(t1.C(OwnerColumn)))
		},
	)
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			t1 := s.Table()
			t2 := sql.Select(FieldID).From(sql.Table(OwnerInverseTable))
			for _, p := range preds {
				p(t2)
			}
			s.Where(sql.In(t1.C(OwnerColumn), t2))
		},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.UserAccount) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			for _, p := range predicates {
				p(s)
			}
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.UserAccount) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			for i, p := range predicates {
				if i > 0 {
					s.Or()
				}
				p(s)
			}
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserAccount) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
