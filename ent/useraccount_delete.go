// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"mq/academy/ent/predicate"
	"mq/academy/ent/useraccount"

	"github.com/facebookincubator/ent/dialect/sql"
)

// UserAccountDelete is the builder for deleting a UserAccount entity.
type UserAccountDelete struct {
	config
	predicates []predicate.UserAccount
}

// Where adds a new predicate to the delete builder.
func (uad *UserAccountDelete) Where(ps ...predicate.UserAccount) *UserAccountDelete {
	uad.predicates = append(uad.predicates, ps...)
	return uad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uad *UserAccountDelete) Exec(ctx context.Context) (int, error) {
	return uad.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (uad *UserAccountDelete) ExecX(ctx context.Context) int {
	n, err := uad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uad *UserAccountDelete) sqlExec(ctx context.Context) (int, error) {
	var res sql.Result
	selector := sql.Select().From(sql.Table(useraccount.Table))
	for _, p := range uad.predicates {
		p(selector)
	}
	query, args := sql.Delete(useraccount.Table).FromSelect(selector).Query()
	if err := uad.driver.Exec(ctx, query, args, &res); err != nil {
		return 0, err
	}
	affected, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	return int(affected), nil
}

// UserAccountDeleteOne is the builder for deleting a single UserAccount entity.
type UserAccountDeleteOne struct {
	uad *UserAccountDelete
}

// Exec executes the deletion query.
func (uado *UserAccountDeleteOne) Exec(ctx context.Context) error {
	n, err := uado.uad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &ErrNotFound{useraccount.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uado *UserAccountDeleteOne) ExecX(ctx context.Context) {
	uado.uad.ExecX(ctx)
}
